<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java虚拟机类加载机制（一））——类加载的时机</title>
      <link href="/2020/01/28/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B61%E2%80%94%E2%80%94%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E6%9C%BA/"/>
      <url>/2020/01/28/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B61%E2%80%94%E2%80%94%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>虚拟机如何加载Class文件？<br>Class文件里的信息进入虚拟机会发生怎样的变化？</p><blockquote><p>虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是类加载机制</p></blockquote><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类从被加载到内存到卸载出内存，生命周期：<br><strong>加载、连接</strong>（验证、准备、解析）<strong>、初始化、使用、卸载</strong></p><p><strong>初始化：</strong></p><ol><li>遇到new、getstatic、putstatic或invokestatic,若类未初始化，则触发初始化</li><li>使用java.lang.reflect对类进行反射调用</li><li>父类没有进行过初始化，先初始化父类</li><li>虚拟机启动时，先初始化要执行的主类</li><li>若java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic的句柄，若此方法句柄对应的类没有进行过初始化，则要先初始化。</li></ol><p>下面以代码来演示</p><pre><code>//父类superClass    public class SuperClass {        static {            System.out.println(&quot;SuperClass init!&quot;);        }    public static int sup = 1111111;    }//子类subClass    public class subClass extends SuperClass{        static {            System.out.println(&quot;SubClass init!&quot;);        }        public static int sub = 2222222;    }</code></pre><p><img src="https://img-blog.csdnimg.cn/20200122152246616.png" alt=""></p><p>guess结果是啥？</p><p>分析，参考上面规则的第三条： <strong>3. 父类没有进行过初始化，先初始化父类</strong></p><p>首先是subClass.sub:要调用子类中的静态变量sub，那就要初始化子类，但是在子类初始化之前，还要去先初始化父类，最后才打印sub的值</p><p>在运行第二句时，两个类已经经过初始化，那么直接打印值即可。</p><p><img src="https://img-blog.csdnimg.cn/20200122152617903.png" alt=""></p><pre><code>public static void main(String[] args) {    SuperClass[] sca = new SuperClass[10];}</code></pre><p>这样，并没有输出superClass init！<br>它代表了元素类型为superClass的一维数组，它是继承于java.lang.Object的子类</p><pre><code>public class ConstClass {    static{        System.out.println(&quot;ConstClass init!&quot;);    }        public static final String Hello = &quot;Hello!&quot;;}public class NotInitialization {    public static void main(String[] args) {        System.out.println(ConstClass.Hello);    }}</code></pre><p>输出什么？</p><p><img src="https://img-blog.csdnimg.cn/20200122185027629.png" alt=""></p><p>Hello！!</p><p>为啥没有执行static里面的语句呢？？？</p><p>这里用了final，即Hello是常量，它被存放在常量池中，和ConstClass这个类没有了联系，主函数在执行时，不需要对ConstClass类进行初始化，所以最终只打印“ Hello！”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/28/hello-world/"/>
      <url>/2020/01/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
